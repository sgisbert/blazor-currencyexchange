@page "/currencyexchange"

@using Domain.Services
@using Domain.Model
@inject ICurrencyService CurrencyService


<h1>Currency converter</h1>
<p>Latest date: @_latestDate.ToString("d")</p>

@if (rates == null)
{
    <p><em>Loading rates...</em></p>
    <p>@error</p>
}
else
{
<EditForm EditContext="@_editContext" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    
    <InputNumber @bind-Value="Model.Amount"></InputNumber>
    <InputSelect @bind-Value="Model.OriginCurrency">
        <option value=""></option>

        @foreach (var currency in currencies)
            {
            <option value="@currency.Key">@currency.Value</option>
            }
    </InputSelect>
    into
    <InputSelect @bind-Value="Model.TargetCurrency">
        <option value=""></option>
        @foreach (var currency in currencies)
            {
            <option value="@currency.Key">@currency.Value</option>
            }
    </InputSelect>
    as of: <InputDate @bind-Value="Model.CurrencyDate" />
    <br />
    <button type="submit">Convert</button>
</EditForm>

    <h3>
        Result: @message
    </h3>
}

@code {
    private Rates rates;
    private Dictionary<string, string> currencies;
    private string error;
    private string message;
    private EditContext _editContext;
    private FormConverterModel Model = new FormConverterModel();

    public DateTime _latestDate;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Model);
        //_editContext.OnFieldChanged += EditContext_OnFieldChanged;

        rates = await CurrencyService.GetLatest();
        if (rates.Error == null)
        {
            _latestDate = await CurrencyService.GetLatestDate();
            Model.CurrencyDate = _latestDate;
            currencies = CurrencyService.GetCurrencies();
            Model.Amount = 1;
        }
        else
            error = rates.Error;
    }
    private async void HandleSubmit()
    {
        var rates = await CurrencyService.GetDate(Model.CurrencyDate, symbols: Model.TargetCurrency, @base: Model.OriginCurrency);
        if (rates.RateList != null && rates.RateList.ContainsKey(Model.TargetCurrency))
        {
            var value = rates.RateList[Model.TargetCurrency];
            var result = Math.Round(Model.Amount * value, 2);
            message = $"{result} {Model.TargetCurrency}";
            StateHasChanged();
        }
    }

    //private async void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    //{
    //    if (Model.CurrencyDate > _latestDate || Model.CurrencyDate < new DateTime(1999, 1, 4))
    //    {
    //        error = $"Selecciona una fecha posterior a 04/01/1999 y anterior a la del Ãºltimo valor: {_latestDate.ToString("d")}";
    //    }
    //    else
    //    {
    //        error = "";
    //        message = $"La fecha seleccionada es {Model.CurrencyDate.ToString("d")}";
    //        rates = await CurrencyService.GetDate(Model.CurrencyDate, Model.Currency);
    //        StateHasChanged();
    //    }
    //}
}