@page "/currency"

@using Domain.Services
@using Domain.Model
@inject ICurrencyService CurrencyService


<h1>Currency exchange rates</h1>
<p>Latest date: @_latestDate.ToString("d")</p>

@if (rates == null)
{
    <p><em>Loading rates...</em></p>
    <p>@error</p>
}
else
{
    <EditForm EditContext="@_editContext">
        <h3>
            1
            <InputSelect id="currencies" @bind-Value="Model.Currency">
                @foreach (var currency in currencies)
                {
                    <option value="@currency.Key">@currency.Value</option>
                }
            </InputSelect>

            is worth, as of: <InputDate @bind-Value="Model.CurrencyDate" />
        </h3>
        <p>@((MarkupString)error)</p>
        <p>@((MarkupString)message)</p>
    </EditForm>
    <table class="table">
        <thead>
            <tr>
                <th>Currency</th>
                <th>Name</th>
                <th>Rate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rate in rates.RateList.OrderBy(r => r.Key))
            {
                <tr>
                    <td>@rate.Key</td>
                    <td>@(currencies.Keys.Contains(rate.Key) ? currencies[rate.Key] : string.Empty)</td>
                    <td>@rate.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Rates rates;
    private Dictionary<string, string> currencies;
    private string error;
    private string message;
    private EditContext _editContext;
    private FormModel Model = new FormModel();

    public DateTime _latestDate;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Model);
        _editContext.OnFieldChanged += EditContext_OnFieldChanged;

        rates = await CurrencyService.GetLatest();
        if (rates.Error == null)
        {
            _latestDate = await CurrencyService.GetLatestDate();
            Model.CurrencyDate = _latestDate;
            Model.Currency = rates.Base;
            currencies = CurrencyService.GetCurrencies();
        }
        else
            error = rates.Error;
    }

    private async void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (Model.CurrencyDate > _latestDate || Model.CurrencyDate < new DateTime(1999, 1, 4))
        {
            error = $"Selecciona una fecha posterior a 04/01/1999 y anterior a la del Ãºltimo valor: {_latestDate.ToString("d")}";
        }
        else
        {
            error = "";
            message = $"La fecha seleccionada es {Model.CurrencyDate.ToString("d")}";
            rates = await CurrencyService.GetDate(Model.CurrencyDate, Model.Currency);
            StateHasChanged();
        }
    }
}